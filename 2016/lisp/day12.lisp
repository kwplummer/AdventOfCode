(ql:quickload '(:str :cl-ppcre :binding-arrows :hu.dwim.defclass-star :alexandria :parseq :metabang-bind :fset))
(defpackage :advent (:use :cl :cl-ppcre :binding-arrows :parseq :metabang-bind :hu.dwim.defclass-star))
(in-package :advent)

(defmacro register (nth) `(gethash (char (,nth parts) 0) vars 0))
(defmacro reg-or-macro (nth) `(if (alpha-char-p (char ,nth 0)) (register ,nth) (parse-integer ,nth)))
(defmacro instruction ((command) &body lines) `(if (equal (first parts) ,command)
                                                 (push (lambda () ,@lines) commands)))

(defun run-commands (lines &optional (vars (make-hash-table)))
  (let ((PC 0) (commands (list)))
    (dolist (line lines)
      (let* ((parts (str:split " " line)) (second (second parts)) (amount (third parts)))
        (instruction ("cpy") (setf (register third) (reg-or-macro second)) (incf PC))
        (instruction ("inc") (incf (register second)) (incf PC))
        (instruction ("dec") (decf (register second)) (incf PC))
        (instruction ("jnz") (if (/= 0 (reg-or-macro second)) (incf PC (parse-integer amount)) (incf PC)))))
    (loop while (< PC (length commands))
          for command = (nth PC commands)
          do (funcall command)
          finally (return (gethash #\a vars)))))

(print (time (run-commands (reverse (str:lines (str:from-file "../input/day12.txt"))))))
(print (time (run-commands (reverse (str:lines (str:from-file "../input/day12.txt")))
                           (alexandria:plist-hash-table (list #\c 1)))))
