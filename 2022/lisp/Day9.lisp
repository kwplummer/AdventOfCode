(ql:quickload '(:str :cl-ppcre :binding-arrows :series :alexandria :fset))
(defpackage :advent (:use :cl :cl-ppcre :binding-arrows))
(in-package :advent)

(defclass knot ()
  ((x :initform 0 :accessor knot-x)
   (y :initform 0 :accessor knot-y)
   (next-knot :initform nil :accessor knot-next)
   (visited :accessor knot-visited)))

(defmethod initialize-instance :after ((k knot) &rest args)
  (setf (knot-visited k) (fset:set (list (knot-x k) (knot-y k)))))

(defun move-knot (direction knot)
  (let ((new-x (knot-x knot))
        (new-y (knot-y knot))
        (next (knot-next knot)))
    (setf new-y (cond ((str:starts-with-p "U" direction) (incf (knot-y knot)))
                      ((str:starts-with-p "D" direction) (decf (knot-y knot)))
                      (t new-y)))
    (setf new-x (cond ((str:ends-with-p "L" direction) (decf (knot-x knot)))
                      ((str:ends-with-p "R" direction) (incf (knot-x knot)))
                      (t new-x)))
    (if next ; If there is a next node, move it. Otherwise note where we've moved.
        (let* ((next-x (knot-x next))
               (next-y (knot-y next))
               (x-diff (abs (- next-x new-x)))
               (y-diff (abs (- next-y new-y))))
          (when (and (< x-diff 2) (< y-diff 2)) (return-from move-knot knot))
          (-> (cond ((> new-y next-y) "U")
                    ((= new-y next-y) "")
                    (t "D"))
            (str:concat (cond ((> new-x next-x) "R")
                              ((= new-x next-x) "")
                              (t "L")))
            (move-knot next)))
        (setf (knot-visited knot) (fset:with (knot-visited knot) (list new-x new-y))))))

(defun run-commands (lines num-knots)
  (let* ((head (make-instance 'knot))
         (tail head))
    (dotimes (n num-knots)
      (setf (knot-next tail) (make-instance 'knot))
      (setf tail (knot-next tail)))
    (loop for line in lines
          do (register-groups-bind (direction amount) ("(\\w) (\\d+)" line)
               (dotimes (n (parse-integer amount))
                 (move-knot direction head)))
          finally (return (fset:size (knot-visited tail))))))

(time (print (-> "../input/day9.txt" (str:from-file) (str:lines) (run-commands 1))))
(time (print (-> "../input/day9.txt" (str:from-file) (str:lines) (run-commands 9))))
