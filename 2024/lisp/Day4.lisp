(ql:quickload '(:str :binding-arrows :hu.dwim.defclass-star :parseq))
(defpackage :advent (:use :cl :binding-arrows :hu.dwim.defclass-star))
(in-package :advent)

(defun build-grid (input)
  (loop with lines = (str:lines input)
        with arr = (make-array (list (length (first lines)) (length lines)) :initial-element nil)
        for y from 0 below (array-dimension arr 1)
        for line = (coerce (nth y lines) 'list)
        do (loop for x from 0 below (array-dimension arr 0)
                 do (setf (aref arr y x) (nth x line)))
        finally (return arr)))

(defmacro iter (y-end (x-start x-dir x-end) char-lookup)
  `(loop for y from 0 below ,y-end
         do (loop for x from ,x-start ,x-dir ,x-end
                  do (let ((word (map 'string #'(lambda (i) (,@char-lookup)) (list 0 1 2 3))))
                       (when (or (string= word "XMAS") (string= word "SAMX"))
                         (incf count 1))))
         finally (return count)))

(defun part-1 (input)
  (let ((count 0) (arr (build-grid input)))
    (iter (array-dimension arr 0) (0 below (- (array-dimension arr 1) 3)) (aref arr y (+ x i)))
    (iter (- (array-dimension arr 0) 3) (0 below (array-dimension arr 1)) (aref arr (+ i y) x))
    (iter (- (array-dimension arr 0) 3) (0 below (- (array-dimension arr 1) 3)) (aref arr (+ y i) (+ x i)))
    (iter (- (array-dimension arr 0) 3) ((1- (array-dimension arr 1)) downto 3) (aref arr (+ y i) (- x i)))))
(frog:report (part-1 (frog:get-advent-of-code-input 2024 4 :input-suffix "test")))
(frog:report (part-1 (frog:get-advent-of-code-input 2024 4)))

(defun part-2 (input)
  (loop with arr = (build-grid input) with count = 0
        for y from 0 below (- (array-dimension arr 0) 2)
        do (loop for x from 0 below (- (array-dimension arr 1) 2)
                 for upper-left = (aref arr y x) for upper-right = (aref arr y (+ 2 x))
                 for lower-left = (aref arr (+ 2 y) x) for lower-right = (aref arr (+ 2 y) (+ 2 x))
                 for mid = (aref arr (1+ y) (1+ x))
                 if (and (char= #\A mid)
                         (or (char= #\M upper-left) (char= #\S upper-left))
                         (or (char= #\M upper-right) (char= #\S upper-right))
                         (or (char= #\M lower-left) (char= #\S lower-left))
                         (or (char= #\M lower-right) (char= #\S lower-right))
                         (not (equal upper-left lower-right))
                         (not (equal upper-right lower-left)))
                   do (incf count))
        finally (return count)))
(frog:report (part-2 (frog:get-advent-of-code-input 2024 4 :input-suffix "test")))
(frog:report (part-2 (frog:get-advent-of-code-input 2024 4)))
